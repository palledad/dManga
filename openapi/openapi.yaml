openapi: 3.0.0
info:
  version: 1.0.0
  title: dManga API
  description: >-
    API schema of backend server for dManga
servers:
  - url: 'http://localhost:8080'
paths:
  /users/{wallet_address}:
    get:
      description: >
        Return a user
      operationId: findUser
      parameters:
        - name: wallet_address
          in: path
          description: wallet_address of user to find
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: >
        Create or update a user
      operationId: putUser
      parameters:
        - name: wallet_address
          in: path
          description: wallet_address of user to find
          required: true
          schema:
            type: string
      requestBody:
        description: user info to register
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserEntry'

      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      description: >
        Delete a user
      operationId: deleteUser
      parameters:
        - name: wallet_address
          in: path
          description: wallet_address of user to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /image_links:
    get:
      description: >
        Put images to storage
      operationId: getImageLink
      responses:
        '200':
          description: image link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageLink"
                
  /articles:
    post:
      description: post new article
      operationId: postArticle
      requestBody:
        description: article info to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostArticleEntry'
      responses:
        '200':
          description: posted article response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
                
  /articles/{article_id}:
    get:
      description: get an article for article_id
      operationId: getArticle
      responses:
        '200':
          description: article response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
      parameters:
        - name: article_id
          in: path
          description: id of article to get
          required: true
          schema:
            type: string
    patch:
      description: update an article info for articleId
      operationId: updateArticle
      requestBody:
        description: article info to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostArticleEntry'
      responses:
        '200':
          description: updated article response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
      parameters:
        - name: article_id
          in: path
          description: id of article to update
          required: true
          schema:
            type: string
            
    delete:
      description: delete an article for articleId
      operationId: deleteArticle
      parameters:
        - name: article_id
          in: path
          description: id of article to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully deleted an article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
  
  /tags:
    post:
      description: post new tag
      operationId: postTag
      requestBody:
        description: tag info to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTagEntry'
      responses:
        '200':
          description: posted tag response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
                
  /tags/{tag_id}:
    get:
      description: get a tag for tag_id
      operationId: getTag
      responses:
        '200':
          description: tag response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - name: tag_id
          in: path
          description: id of a tag to get
          required: true
          schema:
            type: string
    patch:
      description: update a tag info for tag_id
      operationId: updateTag
      requestBody:
        description: tag info to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTagEntry'
      responses:
        '200':
          description: updated tag response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - name: tag_id
          in: path
          description: id of tag to update
          required: true
          schema:
            type: string
            
    delete:
      description: delete an tag for tag_id
      operationId: deleteTag
      parameters:
        - name: tag_id
          in: path
          description: id of tag to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully deleted the tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      
components:
  schemas:
    PutUserEntry:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Taro"
        picture:
          type: "string"
          example: "https://theme.zdassets.com/theme_assets/2313093/fe875eef30ee9649f253e8188f3438bb3be27e96.png"
        biography:
          type: "string"
          example: "こんにちは、よろしくおねがいします。"
    
    PostArticleEntry:
      type: "object"
      required:
        - title
        - content
        - author_address
      properties:
        title:
          type: "string"
        content:
          type: "string"
        author_address:
          type: "string"
        alias:
          type: "string"
          
    PostTagEntry:
      type: "object"
      required:
        - name
      properties:
        name:
          type: "string"
    
    User:
      type: "object"
      required:
        - "wallet_address"
      properties:
        wallet_address:
          type: "string"
          example: "0xc886E08423C65b2B28AAD7CCF2b87F973C915736"
        name:
          type: "string"
          example: "Taro"
        picture:
          type: "string"
          example: "https://theme.zdassets.com/theme_assets/2313093/fe875eef30ee9649f253e8188f3438bb3be27e96.png"
        biography:
          type: "string"
          example: "こんにちは、よろしくおねがいします。"
          
    Article:
      type: "object"
      required:
        - id
        - title
        - content
        - author_address
        - created_at
        - updated_at
      properties:
        id:
          type: "string"
        title:
          type: "string"
        content:
          type: "string"
        author_address:
          type: "string"
          example: "0xc886E08423C65b2B28AAD7CCF2b87F973C915736"
        alias:
          type: "string"
          example: "polygon-create-wallet"
        created_at:
          type: "number"
        updated_at:
          type: "number"
          
    Tag:
      type: "object"
      required:
        - id
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: "string"
        name:
          type: "string"
        created_at:
          type: "number"
        updated_at:
          type: "number"
    
    ImageLink:
      type: "object"
      required:
        - "link"
      properties:
        link:
          type: "string"
          example: "https://sample.com"
        
    Error:
      type: "object"
      required:
        - code
        - type
        - message
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"